// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package messages

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MoveMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsMoveMessage(buf []byte, offset flatbuffers.UOffsetT) *MoveMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MoveMessage{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMoveMessage(buf []byte, offset flatbuffers.UOffsetT) *MoveMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MoveMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MoveMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MoveMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MoveMessage) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MoveMessage) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *MoveMessage) X() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MoveMessage) MutateX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *MoveMessage) Y() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MoveMessage) MutateY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func MoveMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func MoveMessageAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func MoveMessageAddX(builder *flatbuffers.Builder, x float32) {
	builder.PrependFloat32Slot(1, x, 0.0)
}
func MoveMessageAddY(builder *flatbuffers.Builder, y float32) {
	builder.PrependFloat32Slot(2, y, 0.0)
}
func MoveMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
